Camera Decryption ---	

struct CameraInfo
{
		Vector3 location;
		Vector3 rotation;
		float fov;
};

float fov;

CameraInfo GetCameraInfo()
{
		CameraInfo camera;
		auto location_pointer = request->read<uintptr_t>(Cache::World + 0x110);
		auto rotation_pointer = request->read<uintptr_t>(Cache::World + 0x120);

		struct RotationInfo
		{
			double pitch;
			char pad_0008[24];
			double yaw;
			char pad_0028[424];
			double roll;
		} rotationInfo;

		rotationInfo.pitch = request->read<double>(rotation_pointer);
		rotationInfo.yaw = request->read<double>(rotation_pointer + 0x20);
		rotationInfo.roll = request->read<double>(rotation_pointer + 0x1d0);

		camera.location = request->read<Vector3>(location_pointer);
		camera.rotation.x = asin(rotationInfo.roll) * (180.0 / M_PI);
		camera.rotation.y = ((atan2(rotationInfo.pitch * -1, rotationInfo.yaw) * (180.0 / M_PI)) * -1) * -1;
		camera.fov = request->read<float>((uintptr_t)Cache::PlayerController + 0x394) * 90.f;

		return camera;
}

ProjectWorldToScreen ---

Vector3 ProjectWorldToScreen(Vector3 WorldLocation)
	{
		CameraInfo viewInfo = GetCameraInfo();
		D3DMATRIX tempMatrix = ViewPoint::Matrix(viewInfo.rotation);
		Vector3 vAxisX = Vector3(tempMatrix.m[0][0], tempMatrix.m[0][1], tempMatrix.m[0][2]);
		Vector3 vAxisY = Vector3(tempMatrix.m[1][0], tempMatrix.m[1][1], tempMatrix.m[1][2]);
		Vector3 vAxisZ = Vector3(tempMatrix.m[2][0], tempMatrix.m[2][1], tempMatrix.m[2][2]);
		Vector3 vDelta = WorldLocation - viewInfo.location;
		Vector3 vTransformed = Vector3(vDelta.Dot(vAxisY), vDelta.Dot(vAxisZ), vDelta.Dot(vAxisX));
		if (vTransformed.z < 1.f)
		vTransformed.z = 1.f;

		return Vector3((windef::WinWidth / 2.0f) + vTransformed.x * (((windef::WinWidth / 2.0f) / tanf(viewInfo.fov * (float)M_PI / 360.f))) / vTransformed.z, (windef::WinHeight / 2.0f) - vTransformed.y * (((windef::WinWidth / 2.0f) / tanf(viewInfo.fov * (float)M_PI / 360.f))) / vTransformed.z, 0);
}
